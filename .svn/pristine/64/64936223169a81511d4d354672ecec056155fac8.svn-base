using AutoMapper;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using WS.HTZF.Application.Authentication;
using WS.HTZF.Application.Dtos;
using WS.HTZF.Application.Handlers;
using WS.HTZF.Application.Resources;
using WS.HTZF.Core.Entites.Sys;
using WS.HTZF.Core.Exceptions;
using WS.HTZF.Core.Repositories;

namespace WS.HTZF.Application.Services
{
    /// <summary>
    /// 
    /// </summary>
    public class PassportService : BaseService
    {
        private readonly IAccountRepository _accountRepository;
        private readonly IPasswordHandler passwordHandler;
        private readonly IRoleRespository roleRespository;
        private readonly IMenuRespository menuRespository;
        private readonly IJwtHandler jwtHandler;
        private readonly IRoleMenuRepository roleMenuRepository;

        /// <summary>
        /// ctor.
        /// </summary>
        public PassportService(IAccountRepository accountRepository,
            IPasswordHandler passwordHandler,
            IRoleRespository roleRespository,
            IMenuRespository menuRespository,
            IJwtHandler jwtHandler,
            IRoleMenuRepository roleMenuRepository,
            IMapper mapper) : base(mapper)
        {
            _accountRepository = accountRepository;
            this.passwordHandler = passwordHandler;
            this.roleRespository = roleRespository;
            this.menuRespository = menuRespository;
            this.jwtHandler = jwtHandler;
            this.roleMenuRepository = roleMenuRepository;
        }
        /// <summary>
        /// 注册后台账号 
        /// </summary>
        /// <param name="newAccount"></param>
        /// <returns></returns>
        public async Task RegisterAppUserAsync(NewAccountDto newAccount)
        {
            var account= await GetAccountByUserName(newAccount.UserName);
            if (account != null) 
            {
                throw new FriendlyException($"抱歉{newAccount.UserName}该账号已存在!");
            }
            var entity = base.Map<NewAccountDto, Account>(newAccount);
            entity.Password = passwordHandler.GenerateEncryptPassword(newAccount.Password);
            await _accountRepository.InsertAsync(entity);
            await _accountRepository.UnitOfWork.SaveChangesAsync();
        }

        /// <summary>
        /// 所有角色
        /// </summary>
        /// <returns></returns>
        public async Task<List<RoleResource>> GetAllRoles()
        {
            var roles = await roleRespository.GetAllAsync();
            return Map<List<Role>, List<RoleResource>>(roles.ToList());
        }

        /// <summary>
        /// 根据ID删除角色
        /// </summary>
        /// <returns></returns>
        public async Task DeleteRoleById(int id)
        {
            var role=  await GetRoleById(id);
            if (role == null)
            {
                throw new FriendlyException("该角色不存在了");
            }
            if (role.Accounts.Count > 0)
            {
                throw new FriendlyException("抱歉该角色下绑定了多名用户,无法删除");
            }
            await roleRespository.DeleteAsync(id);
            await roleRespository.UnitOfWork.SaveChangesAsync();
        }

        /// <summary>
        /// 修改角色信息
        /// </summary>
        /// <returns></returns>
        public async Task UpdateRoleAsync(ModifiyRoleDto modifiyRoleDto)
        {
            var model = Map<ModifiyRoleDto, Role>(modifiyRoleDto);
            await roleRespository.UpdateAsync(model);
            await roleRespository.UnitOfWork.SaveChangesAsync();
        }

        /// <summary>
        /// 根据账号ID查询账号信息
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public async Task<AccountResource> GetByAccountById(int id)
        {
            var model = await _accountRepository.SingleOrDefaultAsync(x => x.Id == id);
            return Map<Account, AccountResource>(model);
        }

        /// <summary>
        /// 根据账号名查询账号信息
        /// </summary>
        /// <param name="username"></param>
        /// <returns></returns>
        public async Task<List<AccountResource>> FindAccountsByName(string username)
        {
            var models = new List<Account>();
            if (username=="!")
            {
                models = await _accountRepository.GetAllListAsync();
            }
            else
            {
                models = await _accountRepository.GetAllListAsync(x => x.UserName.Contains(username));
            }
            return Map<List<Account>, List<AccountResource>>(models);
        }



        /// <summary>
        /// 修改账号信息
        /// </summary>
        /// <param name="modifiyAccountDto"></param>
        /// <returns></returns>
        public async Task UpdateAccountAsync(ModifiyAccountDto modifiyAccountDto)
        {
            var existmodel = await _accountRepository.SingleOrDefaultAsync(c => c.Id == modifiyAccountDto.Id);
            if (existmodel == null)
                throw new ArgumentException("该账号不存在了");

            if (existmodel.Role!=null&&existmodel.Role.IsSuperAdmin) 
            {
                throw new ArgumentException("您是超级管理员不能被停用");
            }

            var appUser =  Map<ModifiyAccountDto,Account>(modifiyAccountDto, existmodel);
            if (modifiyAccountDto.Password!=null)
            {
                appUser.Password = passwordHandler.GenerateEncryptPassword(modifiyAccountDto.Password);
            }
            await _accountRepository.UpdateAsync(appUser);
            await _accountRepository.UnitOfWork.SaveChangesAsync();
        }


        /// <summary>
        /// 根据ID删除账号
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public async Task DeleteAccountById(int id)
        {
            var isexist = await _accountRepository.SingleOrDefaultAsync(x => x.Id == id) == null ? true : false;
            if (isexist)
                throw new InvalidArgumentException("该账号不存在!");

            await _accountRepository.DeleteAsync(id);
            await _accountRepository.UnitOfWork.SaveChangesAsync();
        }

        /// <summary>
        /// 新增角色
        /// </summary>
        /// <returns></returns>
        public async Task AddRoleAsync(AddRoleMenuDto roleDto)
        {
            if (roleDto.MenusId.Count == 0)
            {
                throw new InvalidArgumentException("请选择菜单页面");
            }
            var roleModel = Map<AddRoleMenuDto, Role>(roleDto);

            var newRoleModel = await roleRespository.InsertAsync(roleModel);
            var newroleId = newRoleModel.Id;
            var rolemenus = new List<RoleMenu>();
            foreach (var item in roleDto.MenusId)
            {
                var roleMenu = new RoleMenu()
                {
                    RoleId = newroleId,
                    MenuId = item
                };
                rolemenus.Add(roleMenu);
            }
            await roleMenuRepository.InsertEntitiesAsync(rolemenus);
            await roleMenuRepository.UnitOfWork.SaveChangesAsync();
        }

        /// <summary>
        /// 新增页面菜单
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public async Task AddMenuAysnc(MenuDto input)
        {
            if (input.ParentId == -1)
            {
                var entity = Map<MenuDto, Menu>(input);
                await menuRespository.InsertAsync(entity);
                await menuRespository.UnitOfWork.SaveChangesAsync();
            }
            else
            {
                var parentEntity = await menuRespository.GetParentMenu(input.ParentId.Value);
                var entity = Map<MenuDto, Menu>(input);
                parentEntity.Children.Add(entity);
                await menuRespository.UnitOfWork.SaveChangesAsync();
            }
        }
        

        /// <summary>
        /// 登录
        /// </summary>
        /// <param name="userName"></param>
        /// <param name="password"></param>
        /// <returns></returns>
        public async Task<WebToken> SingInAppUserAsync(string userName, string password)
        {
            Account appuser = await GetAccountByUserName(userName);
            if (appuser == null)
                throw new NotFoundException($"{userName}没有此账号或已被删除!");

            var verifyPwd = passwordHandler.VerifyHashedPassword(appuser.Password, password);

            if (!verifyPwd)
                throw new InvalidArgumentException($"{userName}账号的密码不正确!");

            if (appuser.IsDisplay)
                throw new FriendlyException($"抱歉{userName}账号已被停用!");

            var dic = new Dictionary<string, string>
            {
                {"RoleId",appuser.RoleId.ToString()}
            };
            appuser.LatestUpdatedAt = DateTime.Now;
            await _accountRepository.UpdateAsync(appuser);
            await _accountRepository.UnitOfWork.SaveChangesAsync();
            var jwt = jwtHandler.CreateToken(appuser.Id.ToString(), dic);
            jwt.FullName = appuser.FullName;
            return jwt;
        }

        /// <summary>
        /// 获取后台管理员列表
        /// </summary>
        /// <returns></returns>
        public async Task<List<AccountResource>> GetAppUserList()
        {
            var users = await _accountRepository.GetAllAsync();
            return Map<List<Account>, List<AccountResource>>(users.ToList());
        }

        /// <summary>
        /// 获取所有菜单列表
        /// </summary>
        /// <returns></returns>
        public async Task<List<MenuResource>> GetAllMenus()
        {
            return await GetMenusAsync();
        }

        /// <summary>
        /// 获取所有菜单
        /// </summary>
        /// <returns></returns>
        private async Task<List<MenuResource>> GetMenusAsync()
        {
            var pmenus = await menuRespository.GetAllMenus();
            return Map<List<Menu>, List<MenuResource>>(pmenus);
        }
        /// <summary>
        /// 根据角色获取菜单资源
        /// </summary>
        /// <param name="roleid"></param>
        /// <returns></returns>
        public async Task<RoleMenuResource> GetRoleMenusByRoleId(int roleid)
        {
            var roleModle = await roleRespository.SingleOrDefaultAsync(c => c.Id == roleid);
            if (roleModle == null)
                throw new ArgumentException("该角色不存在了");

            var roleMenuResource = new RoleMenuResource();

            var maprmrc = Map(roleModle, roleMenuResource);

            return await GetRoleMenusByRoleId(maprmrc,roleid);
        }

        /// <summary>
        /// 修改角色菜单
        /// </summary>
        /// <returns></returns>
        public async Task UpdateRoleMenuAsync(ModfiyRoleMenuDto dto, int loginRoleid)
        {
            var roleModel = await roleRespository.SingleOrDefaultAsync(c => c.Id == loginRoleid);
            if (roleModel == null)
                throw new ArgumentException("不能修改角色菜单,登录者的角色不存在了");
            if (!roleModel.IsSuperAdmin)
                throw new ArgumentException("您不是超级管理员不能修改角色");

            var maprm = Map<ModfiyRoleMenuDto,Role>(dto);
          

            var currRole= await roleRespository.UpdateAsync(maprm); //修改后当前的角色

            var cuuroleId = currRole.Id;

            await roleMenuRepository.ExecuteSqlCommandAsync($"DELETE FROM `wshtzf`.`tws_rolemenu` WHERE RoleId={cuuroleId}");
            var rolemenus = new List<RoleMenu>();
            foreach (var item in dto.MenusId)
            {
                var roleMenu = new RoleMenu()
                {
                    RoleId = cuuroleId,
                    MenuId = item
                };
                rolemenus.Add(roleMenu);
            }
            await roleMenuRepository.InsertEntitiesAsync(rolemenus);
            await roleMenuRepository.UnitOfWork.SaveChangesAsync();
        }


        private async Task<RoleMenuResource> GetRoleMenusByRoleId(RoleMenuResource roleMenuResource, int roleid)
        {
            var menus = await roleMenuRepository.GetAllListAsync(c => c.RoleId == roleid);
            var menuIds = menus.Select(c => new { MenuId = c.MenuId }).ToList();
            var listmenuid = new List<int>();
            menuIds.ForEach(c => roleMenuResource.RoleMenuIds.Add(c.MenuId));
            return roleMenuResource;
        }



        private async Task<Role> GetRoleById(int id)
        {
            return await roleRespository.SingleOrDefaultAsync(x => x.Id == id);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="userName"></param>
        /// <returns></returns>
        private async Task<Account> GetAccountByUserName(string userName)
        {
            return await _accountRepository.SingleOrDefaultAsync(x => string.Equals(x.UserName, userName));
        }
    }
}
