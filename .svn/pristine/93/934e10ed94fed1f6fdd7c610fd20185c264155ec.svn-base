using AutoMapper;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using WS.HTZF.Application.Authentication;
using WS.HTZF.Application.Dtos;
using WS.HTZF.Application.Handlers;
using WS.HTZF.Application.Resources;
using WS.HTZF.Core.Entites.Sys;
using WS.HTZF.Core.Exceptions;
using WS.HTZF.Core.Repositories;

namespace WS.HTZF.Application.Services
{
    /// <summary>
    /// 
    /// </summary>
    public class PassportService : BaseService
    {
        private readonly IAccountRepository _accountRepository;
        private readonly IPasswordHandler passwordHandler;
        private readonly IRoleRespository roleRespository;
        private readonly IMenuRespository menuRespository;
        private readonly IJwtHandler jwtHandler;

        /// <summary>
        /// ctor.
        /// </summary>
        public PassportService(IAccountRepository accountRepository,
            IPasswordHandler passwordHandler,
            IRoleRespository roleRespository,
            IMenuRespository menuRespository,
            IJwtHandler jwtHandler,
            IMapper mapper) : base(mapper)
        {
            _accountRepository = accountRepository;
            this.passwordHandler = passwordHandler;
            this.roleRespository = roleRespository;
            this.menuRespository = menuRespository;
            this.jwtHandler = jwtHandler;
        }



        /// <summary>
        /// 注册后台账号 
        /// </summary>
        /// <param name="newAccount"></param>
        /// <returns></returns>
        public async Task RegisterAppUserAsync(NewAccountDto newAccount)
        {
            var account= await GetAccountByUserName(newAccount.UserName);
            if (account != null) 
            {
                throw new FriendlyException($"抱歉{newAccount.UserName}该账号已存在!");
            }
            var entity = base.Map<NewAccountDto, Account>(newAccount);
            entity.Password = passwordHandler.GenerateEncryptPassword(newAccount.Password);
            await _accountRepository.InsertAsync(entity);
        }

        /// <summary>
        /// 所有角色
        /// </summary>
        /// <returns></returns>
        public async Task<List<RoleResource>> GetAllRoles()
        {
            var roles = await roleRespository.GetAllAsync();
            return Map<List<Role>, List<RoleResource>>(roles.ToList());
        }
        /// <summary>
        /// 新增角色
        /// </summary>
        /// <returns></returns>
        public async Task AddRoleAsync() 
        {
            await Task.CompletedTask;
        }

        /// <summary>
        /// 登录
        /// </summary>
        /// <param name="userName"></param>
        /// <param name="password"></param>
        /// <returns></returns>
        public async Task<WebToken> SingInAppUserAsync(string userName, string password)
        {
            Account appuser = await GetAccountByUserName(userName);
            if (appuser == null)
                throw new NotFoundException($"{userName}没有此账号或已被删除!");

            var verifyPwd = passwordHandler.VerifyHashedPassword(appuser.Password, password);

            if (!verifyPwd)
                throw new InvalidArgumentException($"{userName}账号的密码不正确!");

            if (appuser.IsDisplay)
                throw new FriendlyException($"抱歉{userName}账号已被停用!");

            var dic = new Dictionary<string, string>
            {
                {"RoleId",appuser.RoleId.ToString()}
            };
            appuser.LatestUpdatedAt = DateTime.Now;
            await _accountRepository.UpdateAsync(appuser);
            var jwt = jwtHandler.CreateToken(appuser.Id.ToString(), dic);
            return jwt;
        }

        /// <summary>
        /// 获取后台管理员列表
        /// </summary>
        /// <returns></returns>
        public async Task<List<AccountResource>> GetAppUserList()
        {
            var users = await _accountRepository.GetAllAsync();

            return Map<List<Account>, List<AccountResource>>(users.ToList());
        }

        /// <summary>
        /// 新增菜单页面
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public async Task AddMenuAysnc(MenuDto input)
        {
            if (input.ParentId == -1)
            {
                var entity = Map<MenuDto, Menu>(input);
                await menuRespository.InsertAsync(entity);
            }
            else
            {
                var parentEntity = await menuRespository.GetParentMenu(input.ParentId.Value);
                var entity = Map<MenuDto, Menu>(input);
                parentEntity.Children.Add(entity);
                await menuRespository.UnitOfWork.SaveChangesAsync();
            }
        }
        /// <summary>
        /// 根据用户ID获取菜单列表
        /// </summary>
        /// <param name="userid"></param>
        /// <returns></returns>
        public async Task<List<MenuResource>> GetMenusByAccountId(int userid)
        {
            var user = await _accountRepository.GetAsync(userid);
            if (user.Role.IsSuperAdmin)
            {
                var menus = await GetMenus();
                return menus;
            }
            else
            {
                var menus = await GetMenusByRoleId(user.RoleId.Value);
                return menus;
            }
        }

        /// <summary>
        /// 获取所有菜单
        /// </summary>
        /// <returns></returns>
        private async Task<List<MenuResource>> GetMenus()
        {
            var pmenus = await menuRespository.GetAllMenus();
            return Map<List<Menu>, List<MenuResource>>(pmenus);
        }
        /// <summary>
        /// 根据角色获取菜单资源
        /// </summary>
        /// <param name="roleid"></param>
        /// <returns></returns>
        private async Task<List<MenuResource>> GetMenusByRoleId(int roleid)
        {
            var menus = await menuRespository.GetMenuByRole(roleid);

            return Map<List<Menu>, List<MenuResource>>(menus);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="userName"></param>
        /// <returns></returns>
        private async Task<Account> GetAccountByUserName(string userName)
        {
            return await _accountRepository.SingleOrDefaultAsync(x => string.Equals(x.UserName, userName));
        }
    }
}
